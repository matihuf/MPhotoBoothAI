// <auto-generated />
using System;
using MPhotoBoothAI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MPhotoBoothAI.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250106120849_LayoutData")]
    partial class LayoutData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.CameraSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aperture")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Iso")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ShutterSpeed")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("WhiteBalance")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("CameraSettings");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.FaceSwapTemplateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FaceSwapTemplateGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Faces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("FaceSwapTemplateGroupId");

                    b.ToTable("FaceSwapTemplates");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.FaceSwapTemplateGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("FaceSwapTemplateGroups");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.LayoutDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LayoutDatas");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.OverlayImageDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Angle")
                        .HasColumnType("REAL");

                    b.Property<int>("LayoutDataEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Left")
                        .HasColumnType("REAL");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<double>("Scale")
                        .HasColumnType("REAL");

                    b.Property<double>("Top")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LayoutDataEntityId");

                    b.ToTable("OverlayImageDataEntity");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.PhotoLayoutDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Angle")
                        .HasColumnType("REAL");

                    b.Property<int>("LayoutDataEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Left")
                        .HasColumnType("REAL");

                    b.Property<double>("Scale")
                        .HasColumnType("REAL");

                    b.Property<double>("Top")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LayoutDataEntityId");

                    b.ToTable("PhotoLayoutDataEntity");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.UserSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CultureInfoName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.FaceSwapTemplateEntity", b =>
                {
                    b.HasOne("MPhotoBoothAI.Models.Entities.FaceSwapTemplateGroupEntity", "FaceSwapTemplateGroup")
                        .WithMany("Templates")
                        .HasForeignKey("FaceSwapTemplateGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaceSwapTemplateGroup");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.OverlayImageDataEntity", b =>
                {
                    b.HasOne("MPhotoBoothAI.Models.Entities.LayoutDataEntity", "LayoutData")
                        .WithMany("OverlayImageData")
                        .HasForeignKey("LayoutDataEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutData");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.PhotoLayoutDataEntity", b =>
                {
                    b.HasOne("MPhotoBoothAI.Models.Entities.LayoutDataEntity", "LayoutData")
                        .WithMany("PhotoLayoutData")
                        .HasForeignKey("LayoutDataEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutData");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.FaceSwapTemplateGroupEntity", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("MPhotoBoothAI.Models.Entities.LayoutDataEntity", b =>
                {
                    b.Navigation("OverlayImageData");

                    b.Navigation("PhotoLayoutData");
                });
#pragma warning restore 612, 618
        }
    }
}
